#!/usr/bin/env bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PACKAGES_JSON="$HOME/devenv/packages.json"
DOTFILES_DIR="$HOME/devenv/dotfiles"
CONFIG_DIR="$HOME/.config"

# Helper functions
print_help() {
    echo -e "${BLUE}CME - Custom Management Environment${NC}"
    echo
    echo "Usage: cme <command> [options]"
    echo
    echo "Commands:"
    echo "  install <package>    Install a package and add it to packages.json"
    echo "  remove <package>     Remove a package and remove it from packages.json"
    echo "  clean               Remove packages not in packages.json"
    echo "  list               List all packages in packages.json"
    echo "  link               Link all dotfiles"
    echo "  unlink             Unlink all dotfiles"
    echo "  help               Show this help message"
    echo
    echo "Categories:"
    echo "  base               System packages (linux, xorg, drivers)"
    echo "  development        Development tools and libraries"
    echo "  utility            User utilities and applications"
}

check_dependencies() {
    if ! command -v jq &>/dev/null; then
        echo -e "${RED}Error: jq is required but not installed.${NC}"
        echo "Please install jq first: cme install jq"
        exit 1
    fi
}

init_packages_json() {
    if [[ ! -f "$PACKAGES_JSON" ]]; then
        mkdir -p "$(dirname "$PACKAGES_JSON")"
        cat > "$PACKAGES_JSON" << EOF
{
  "base": [],
  "development": [],
  "utility": []
}
EOF
    fi
}

install_package() {
    local pkg="$1"
    echo -e "${BLUE}Installing $pkg...${NC}"
    if paru -Si "$pkg" &>/dev/null; then
        paru -S --needed --noconfirm "$pkg"
    else
        paru -S --needed --noconfirm "$pkg"
    fi
    return $?
}

add_package() {
    local pkg="$1"
    local category="$2"
    
    # Check if package exists in repos
    if ! paru -Si "$pkg" &>/dev/null; then
        echo -e "${RED}Error: Package '$pkg' not found in repositories${NC}"
        return 1
    fi
    
    # Add to packages.json
    local updated
    updated=$(jq --arg pkg "$pkg" --arg cat "$category" '. + {($cat): (. + {($cat): []} | .[$cat] + [$pkg] | unique)}' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"
    
    echo -e "${GREEN}Added '$pkg' to $category category${NC}"
    
    # Install the package
    if install_package "$pkg"; then
        echo -e "${GREEN}Successfully installed $pkg${NC}"
    else
        echo -e "${RED}Failed to install $pkg${NC}"
        return 1
    fi
}

remove_package() {
    local pkg="$1"
    local category
    
    # Find which category the package is in
    for cat in base development utility; do
        if jq -e --arg pkg "$pkg" ".$cat[] | select(. == \$pkg)" "$PACKAGES_JSON" &>/dev/null; then
            category="$cat"
            break
        fi
    done
    
    if [[ -z "$category" ]]; then
        echo -e "${YELLOW}Package '$pkg' not found in packages.json${NC}"
        return 1
    fi
    
    # Remove the package
    echo -e "${BLUE}Removing $pkg...${NC}"
    if ! paru -Rns --noconfirm "$pkg"; then
        echo -e "${RED}Failed to remove $pkg${NC}"
        return 1
    fi
    
    # Remove from packages.json
    local updated
    updated=$(jq --arg pkg "$pkg" --arg cat "$category" '. + {($cat): (. + {($cat): []} | .[$cat] - [$pkg])}' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"
    
    echo -e "${GREEN}Removed '$pkg' from $category category${NC}"
}

clean_packages() {
    echo -e "${YELLOW}Checking for packages not in packages.json...${NC}"
    
    # Get all installed packages
    local installed_packages
    installed_packages=$(paru -Qq)
    
    # Get all packages from packages.json
    local json_packages
    json_packages=$(jq -r '.base[], .development[], .utility[]' "$PACKAGES_JSON")
    
    # Find packages to remove
    local to_remove
    to_remove=$(comm -23 <(echo "$installed_packages" | sort) <(echo "$json_packages" | sort))
    
    if [[ -z "$to_remove" ]]; then
        echo -e "${GREEN}No packages to remove${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}The following packages will be removed:${NC}"
    echo "$to_remove"
    echo
    read -p "Do you want to continue? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        paru -Rns $to_remove
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}Successfully removed packages${NC}"
        else
            echo -e "${RED}Failed to remove some packages${NC}"
            return 1
        fi
    fi
}

link_dotfiles() {
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        echo -e "${RED}Error: Dotfiles directory not found at $DOTFILES_DIR${NC}"
        return 1
    fi
    
    mkdir -p "$CONFIG_DIR"
    for item in "$DOTFILES_DIR"/.* "$DOTFILES_DIR"/*; do
        [[ -e "$item" && ! "$(basename "$item")" =~ ^\.{1,2}$ ]] || continue
        local filename
        filename=$(basename "$item")
        local target="$CONFIG_DIR/$filename"
        
        if [[ -e "$target" || -L "$target" ]]; then
            rm -rf "$target"
        fi
        
        ln -sf "$item" "$target"
        echo -e "${GREEN}Linked: $target -> $item${NC}"
    done
}

unlink_dotfiles() {
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        echo -e "${RED}Error: Dotfiles directory not found at $DOTFILES_DIR${NC}"
        return 1
    fi
    
    for item in "$DOTFILES_DIR"/.* "$DOTFILES_DIR"/*; do
        [[ -e "$item" && ! "$(basename "$item")" =~ ^\.{1,2}$ ]] || continue
        local filename
        filename=$(basename "$item")
        local target="$CONFIG_DIR/$filename"
        
        if [[ -L "$target" ]]; then
            rm -f "$target"
            echo -e "${GREEN}Unlinked: $target${NC}"
        fi
    done
}

list_packages() {
    echo -e "${BLUE}Base Packages:${NC}"
    jq -r '.base[]' "$PACKAGES_JSON"
    echo
    echo -e "${BLUE}Development Packages:${NC}"
    jq -r '.development[]' "$PACKAGES_JSON"
    echo
    echo -e "${BLUE}Utility Packages:${NC}"
    jq -r '.utility[]' "$PACKAGES_JSON"
}

# Main script
check_dependencies
init_packages_json

case "$1" in
    install)
        if [[ -z "$2" ]]; then
            echo -e "${RED}Error: Package name required${NC}"
            exit 1
        fi
        echo -e "${BLUE}Select category for $2:${NC}"
        PS3="Select category: "
        select category in base development utility; do
            if [[ -n "$category" ]]; then
                add_package "$2" "$category"
                break
            fi
        done
        ;;
    remove)
        if [[ -z "$2" ]]; then
            echo -e "${RED}Error: Package name required${NC}"
            exit 1
        fi
        remove_package "$2"
        ;;
    clean)
        clean_packages
        ;;
    list)
        list_packages
        ;;
    link)
        link_dotfiles
        ;;
    unlink)
        unlink_dotfiles
        ;;
    help|"")
        print_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        print_help
        exit 1
        ;;
esac 