;;; exwm-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from exwm.el

(defvar exwm-wm-mode nil "\
Non-nil if Exwm-Wm mode is enabled.
See the `exwm-wm-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-wm-mode'.")
(custom-autoload 'exwm-wm-mode "exwm" nil)
(autoload 'exwm-wm-mode "exwm" "\
EXWM window manager mode.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Wm mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-wm-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'exwm-enable "exwm" "\
Obsolete function to enable/disable EXWM, use `exwm-wm-mode' instead.
Optional argument UNDO may be either of the following symbols:
- `undo' prevents reinitialization.
- `undo-all' attempts to revert all hooks and advice.

(fn &optional UNDO)")
(make-obsolete 'exwm-enable 'exwm-wm-mode "0.33")
(register-definition-prefixes "exwm" '("exwm-"))


;;; Generated autoloads from exwm-background.el

(defvar exwm-background-mode nil "\
Non-nil if Exwm-Background mode is enabled.
See the `exwm-background-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-background-mode'.")
(custom-autoload 'exwm-background-mode "exwm-background" nil)
(autoload 'exwm-background-mode "exwm-background" "\
Toggle EXWM background support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Background mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-background-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-background" '("exwm-background-"))


;;; Generated autoloads from exwm-core.el

(register-definition-prefixes "exwm-core" '("exwm-"))


;;; Generated autoloads from exwm-floating.el

(autoload 'exwm-floating-toggle-floating "exwm-floating" "\
Toggle the current window between floating and non-floating states." t)
(autoload 'exwm-floating-hide "exwm-floating" "\
Hide the current floating X window (which would show again when selected)." t)
(register-definition-prefixes "exwm-floating" '("exwm-floating-"))


;;; Generated autoloads from exwm-input.el

(register-definition-prefixes "exwm-input" '("exwm-input-"))


;;; Generated autoloads from exwm-layout.el

(register-definition-prefixes "exwm-layout" '("exwm-layout-"))


;;; Generated autoloads from exwm-manage.el

(register-definition-prefixes "exwm-manage" '("exwm-manage-"))


;;; Generated autoloads from exwm-randr.el

(defvar exwm-randr-mode nil "\
Non-nil if Exwm-Randr mode is enabled.
See the `exwm-randr-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-randr-mode'.")
(custom-autoload 'exwm-randr-mode "exwm-randr" nil)
(autoload 'exwm-randr-mode "exwm-randr" "\
Toggle EXWM randr support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Randr mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-randr-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-randr" '("exwm-randr-"))


;;; Generated autoloads from exwm-systemtray.el

(defvar exwm-systemtray-mode nil "\
Non-nil if Exwm-Systemtray mode is enabled.
See the `exwm-systemtray-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-systemtray-mode'.")
(custom-autoload 'exwm-systemtray-mode "exwm-systemtray" nil)
(autoload 'exwm-systemtray-mode "exwm-systemtray" "\
Toggle EXWM systemtray support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Systemtray mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-systemtray-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-systemtray" '("exwm-systemtray-"))


;;; Generated autoloads from exwm-workspace.el

(register-definition-prefixes "exwm-workspace" '("exwm-workspace-"))


;;; Generated autoloads from exwm-xim.el

(defvar exwm-xim-mode nil "\
Non-nil if Exwm-Xim mode is enabled.
See the `exwm-xim-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-xim-mode'.")
(custom-autoload 'exwm-xim-mode "exwm-xim" nil)
(autoload 'exwm-xim-mode "exwm-xim" "\
Toggle EXWM XIM support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Xim mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-xim-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-xim" '("exwm-xim-"))


;;; Generated autoloads from exwm-xsettings.el

(defvar exwm-xsettings-mode nil "\
Non-nil if Exwm-Xsettings mode is enabled.
See the `exwm-xsettings-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `exwm-xsettings-mode'.")
(custom-autoload 'exwm-xsettings-mode "exwm-xsettings" nil)
(autoload 'exwm-xsettings-mode "exwm-xsettings" "\
Toggle EXWM xsettings support.

This is a global minor mode.  If called interactively, toggle the
`Exwm-Xsettings mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='exwm-xsettings-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "exwm-xsettings" '("exwm-xsettings"))

;;; End of scraped data

(provide 'exwm-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; exwm-autoloads.el ends here
