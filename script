#!/usr/bin/env bash

set -euo pipefail

IFS=$'\n\t'

WIDTH=80
HEIGHT=40
CONFIG_DIR="$HOME/.config"
DOTFILES_DIR="$HOME/devenv"
NVIM_DIR="$HOME/nvim"
PACKAGE_MANAGER="paru"
PACKAGES_JSON="$DOTFILES_DIR/packages.json"
SUDO_PASS=""
TMP_OUTPUT="/tmp/package-install-output.log"
NVIM_URL="https://github.com/xsoder/nvim.git"
SCRIPT_NAME="$DOTFILES_DIR/script"

main() {
    trap 'cleanup' INT TERM
    
    if ! command -v dialog &>/dev/null; then
        echo "Installing dialog..."
        if command -v pacman &>/dev/null; then
            sudo pacman -S --needed --noconfirm dialog
        elif command -v apt &>/dev/null; then
            sudo apt update && sudo apt install -y dialog
        elif command -v dnf &>/dev/null; then
            sudo dnf install -y dialog
        else
            echo "Error: Cannot install dialog. Please install it manually."
            exit 1
        fi
    fi
    
    # Check if jq is installed
    if ! command -v jq &>/dev/null; then
        echo "Installing jq..."
        if command -v pacman &>/dev/null; then
            sudo pacman -S --needed --noconfirm jq
        elif command -v apt &>/dev/null; then
            sudo apt update && sudo apt install -y jq
        elif command -v dnf &>/dev/null; then
            sudo dnf install -y jq
        else
            echo "Error: Cannot install jq. Please install it manually."
            exit 1
        fi
    fi
    
    dialog_box
    clear
    exit 0
}

cleanup() {
    clear
    printf "Script interrupted or terminated\n" >&2
    exit 1
}

get_sudo_password() {
    local pass
    while true; do
        pass=$(dialog --insecure --passwordbox "Enter sudo password" "$HEIGHT" "$WIDTH" 2>&1 >/dev/tty)
        if [[ -z "${pass// /}" ]]; then
            dialog --title "Authentication Failed" --msgbox "Password required" "$HEIGHT" "$WIDTH"
            clear
            exit 1
        fi
        if echo "$pass" | sudo -S -v &>/dev/null; then
            export SUDO_PASS="$pass"
            break
        else
            dialog --title "Authentication Failed" --msgbox "Incorrect password. Try again." "$HEIGHT" "$WIDTH"
        fi
    done
}

run_with_sudo() {
    if [[ -z "${SUDO_PASS:-}" ]]; then
        get_sudo_password
    fi
    printf '%s\n' "$SUDO_PASS" | sudo -S "$@"
}

install_aur_helper() {
    local choice
    choice=$(dialog --title "AUR Helper Selection" \
        --cancel-label "Skip" \
        --menu "Choose AUR helper to install" "$HEIGHT" "$WIDTH" 0 \
        1 "paru" \
        2 "yay" \
        2>&1 >/dev/tty)

    local status=$?
    [[ $status -eq 1 ]] && return 0

    local helper
    case "$choice" in
    1) helper="paru" ;;
    2) helper="yay" ;;
    *) return 0 ;;
    esac

    if command -v "$helper" &>/dev/null; then
        export PACKAGE_MANAGER="$helper"
        return 0
    fi

    dialog --title "Installing $helper" --infobox "Installing $helper..." "$HEIGHT" "$WIDTH"

    run_with_sudo pacman -S --needed --noconfirm base-devel git

    local tmp_dir="/tmp/$helper-install"
    rm -rf "$tmp_dir"
    git clone "https://aur.archlinux.org/$helper.git" "$tmp_dir"
    cd "$tmp_dir"
    makepkg -si --noconfirm
    cd - >/dev/null
    rm -rf "$tmp_dir"

    export PACKAGE_MANAGER="$helper"
}

setup_package_tracking() {
    local wrapper_script="$HOME/.local/bin/package-tracker"
    mkdir -p "$(dirname "$wrapper_script")"

    cat >"$wrapper_script" <<'EOF'
#!/usr/bin/env bash

PACKAGES_JSON="$HOME/devenv/packages.json"
ORIGINAL_CMD="$1"
shift

add_to_json() {
    local pkg="$1"
    
    if [[ ! -f "$PACKAGES_JSON" ]]; then
        mkdir -p "$(dirname "$PACKAGES_JSON")"
        echo '{"packages":[]}' > "$PACKAGES_JSON"
    fi
    
    if jq -e --arg pkg "$pkg" '.packages[] | select(. == $pkg)' "$PACKAGES_JSON" >/dev/null 2>&1; then
        return 0
    fi
    
    local updated
    updated=$(jq --arg pkg "$pkg" '.packages += [$pkg] | .packages |= sort | .packages |= unique' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"
}

remove_from_json() {
    local pkg="$1"
    
    if [[ ! -f "$PACKAGES_JSON" ]]; then
        return 0
    fi
    
    local updated
    updated=$(jq --arg pkg "$pkg" '.packages |= map(select(. != $pkg))' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"
}

if [[ "$ORIGINAL_CMD" == "pacman" || "$ORIGINAL_CMD" == "paru" || "$ORIGINAL_CMD" == "yay" ]]; then
    if [[ "$1" == "-S" || "$1" == "-Sy" || "$1" == "-Su" || "$1" == "-Syu" ]]; then
        if "$ORIGINAL_CMD" "$@"; then
            for arg in "$@"; do
                if [[ ! "$arg" =~ ^- ]] && [[ "$arg" != "-S" ]] && [[ "$arg" != "-Sy" ]] && [[ "$arg" != "-Su" ]] && [[ "$arg" != "-Syu" ]] && [[ "$arg" != "--needed" ]] && [[ "$arg" != "--noconfirm" ]]; then
                    add_to_json "$arg"
                fi
            done
            exit 0
        else
            exit $?
        fi
    elif [[ "$1" == "-R"* ]]; then
        if "$ORIGINAL_CMD" "$@"; then
            for arg in "$@"; do
                if [[ ! "$arg" =~ ^- ]] && [[ "$arg" != "-R"* ]]; then
                    remove_from_json "$arg"
                fi
            done
            exit 0
        else
            exit $?
        fi
    fi
fi

"$ORIGINAL_CMD" "$@"
EOF

    chmod +x "$wrapper_script"

    local sudo_wrapper="$HOME/.local/bin/sudo-tracker"
    cat >"$sudo_wrapper" <<'EOF'
#!/usr/bin/env bash

PACKAGES_JSON="$HOME/devenv/packages.json"

add_to_json() {
    local pkg="$1"
    
    if [[ ! -f "$PACKAGES_JSON" ]]; then
        mkdir -p "$(dirname "$PACKAGES_JSON")"
        echo '{"packages":[]}' > "$PACKAGES_JSON"
    fi
    
    if jq -e --arg pkg "$pkg" '.packages[] | select(. == $pkg)' "$PACKAGES_JSON" >/dev/null 2>&1; then
        return 0
    fi
    
    local updated
    updated=$(jq --arg pkg "$pkg" '.packages += [$pkg] | .packages |= sort | .packages |= unique' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"
}

remove_from_json() {
    local pkg="$1"
    
    if [[ ! -f "$PACKAGES_JSON" ]]; then
        return 0
    fi
    
    local updated
    updated=$(jq --arg pkg "$pkg" '.packages |= map(select(. != $pkg))' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"
}

if [[ "$1" == "pacman" || "$1" == "paru" || "$1" == "yay" ]]; then
    if [[ "$2" == "-S" || "$2" == "-Sy" || "$2" == "-Su" || "$2" == "-Syu" ]]; then
        if /usr/bin/sudo "$@"; then
            for arg in "${@:3}"; do
                if [[ ! "$arg" =~ ^- ]] && [[ "$arg" != "-S" ]] && [[ "$arg" != "-Sy" ]] && [[ "$arg" != "-Su" ]] && [[ "$arg" != "-Syu" ]] && [[ "$arg" != "--needed" ]] && [[ "$arg" != "--noconfirm" ]]; then
                    add_to_json "$arg"
                fi
            done
            exit 0
        else
            exit $?
        fi
    elif [[ "$2" == "-R"* ]]; then
        if /usr/bin/sudo "$@"; then
            for arg in "${@:3}"; do
                if [[ ! "$arg" =~ ^- ]] && [[ "$arg" != "-R"* ]]; then
                    remove_from_json "$arg"
                fi
            done
            exit 0
        else
            exit $?
        fi
    fi
fi

/usr/bin/sudo "$@"
EOF

    chmod +x "$sudo_wrapper"

    # Setup shell aliases with better handling
    for config in "$HOME/.bashrc" "$HOME/.zshrc"; do
        if [[ -f "$config" ]]; then
            # Remove existing aliases
            sed -i '/# Package tracking aliases/,/# End package tracking aliases/d' "$config"
            # Add new aliases
            cat >>"$config" <<EOF

# Package tracking aliases
alias pacman='$wrapper_script pacman'
alias paru='$wrapper_script paru'
alias yay='$wrapper_script yay'
alias sudo='$sudo_wrapper'
# End package tracking aliases
EOF
        fi
    done

    # Setup fish shell if present
    local fish_config="$HOME/.config/fish/config.fish"
    if [[ -f "$fish_config" ]] || command -v fish &>/dev/null; then
        mkdir -p "$HOME/.config/fish"
        if [[ ! -f "$fish_config" ]]; then
            touch "$fish_config"
        fi
        sed -i '/# Package tracking aliases/,/# End package tracking aliases/d' "$fish_config" 2>/dev/null || true
        cat >>"$fish_config" <<EOF

# Package tracking aliases
alias pacman='$wrapper_script pacman'
alias paru='$wrapper_script paru'
alias yay='$wrapper_script yay'
alias sudo='$sudo_wrapper'
# End package tracking aliases
EOF
        
        mkdir -p "$HOME/.config/fish/functions"
        for cmd in pacman paru yay sudo; do
            if [[ "$cmd" == "sudo" ]]; then
                cat >"$HOME/.config/fish/functions/${cmd}.fish" <<EOF
function $cmd --wraps='$cmd' --description 'sudo with package tracking'
    $sudo_wrapper \$argv
end
EOF
            else
                cat >"$HOME/.config/fish/functions/${cmd}.fish" <<EOF
function $cmd --wraps='$cmd' --description 'Package manager with tracking'
    $wrapper_script $cmd \$argv
end
EOF
            fi
        done
    fi

    # Add ~/.local/bin to PATH if not already present
    if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
        for config in "$HOME/.bashrc" "$HOME/.zshrc"; do
            if [[ -f "$config" ]]; then
                echo 'export PATH="$HOME/.local/bin:$PATH"' >>"$config"
            fi
        done
    fi

    if [[ -f "$fish_config" ]] || command -v fish &>/dev/null; then
        if ! grep -q "fish_add_path.*\.local/bin" "$fish_config" 2>/dev/null; then
            echo 'fish_add_path ~/.local/bin' >>"$fish_config"
        fi
    fi
}

force_link() {
    local source="$1"
    local target="$2"
    
    # Remove existing target (file, directory, or symlink)
    if [[ -e "$target" || -L "$target" ]]; then
        rm -rf "$target"
    fi
    
    # Create target directory if it doesn't exist
    mkdir -p "$(dirname "$target")"
    
    # Create the symlink
    ln -sf "$source" "$target"
}

edit_dev() {
    nvim "$SCRIPT_NAME"
}
full_setup() {
    get_sudo_password

    local steps=7
    local current=0

    current=$((current + 1))
    dialog --title "Full Setup ($current/$steps)" --infobox "Installing essential packages..." "$HEIGHT" "$WIDTH"
    install_essential_packages

    current=$((current + 1))
    dialog --title "Full Setup ($current/$steps)" --infobox "Installing AUR helper..." "$HEIGHT" "$WIDTH"
    install_aur_helper

    current=$((current + 1))
    dialog --title "Full Setup ($current/$steps)" --infobox "Initializing package configuration..." "$HEIGHT" "$WIDTH"
    init_packages_silent

    current=$((current + 1))
    dialog --title "Full Setup ($current/$steps)" --infobox "Installing all packages..." "$HEIGHT" "$WIDTH"
    install_all_packages_silent

    current=$((current + 1))
    dialog --title "Full Setup ($current/$steps)" --infobox "Setting up dotfiles and package tracking..." "$HEIGHT" "$WIDTH"
    link_dotfiles_silent
    setup_package_tracking
    link_hidden_config
    dialog --title "Full Setup Complete" --msgbox "Full setup completed successfully!\n\nAll packages have been installed and dotfiles symlinked.\n\nPlease restart your shell or source your shell config to apply changes." "$HEIGHT" "$WIDTH"
}

install_essential_packages() {
    local essential_packages=("git" "dialog" "jq" "base-devel")
    
    for pkg in "${essential_packages[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            run_with_sudo pacman -S --needed --noconfirm "$pkg"
        fi
    done
}

link_hidden_config() {
    local configs=(
        "$DOTFILES_DIR/starship.toml:$CONFIG_DIR/starship.toml"
        "$DOTFILES_DIR/.tmux.conf:$HOME/.tmux.conf"
        "$DOTFILES_DIR/.bashrc:$HOME/.bashrc"
        "$DOTFILES_DIR/.zshrc:$HOME/.zshrc"
        "$DOTFILES_DIR/.gitconfig:$HOME/.gitconfig"
    )

    local linked_files=()
    local missing_files=()

    for config in "${configs[@]}"; do
        local source="${config%:*}"
        local target="${config#*:}"
        
        if [[ -f "$source" ]]; then
            force_link "$source" "$target"
            linked_files+=("✓ $(basename "$source") -> $target")
        else
            missing_files+=("✗ $(basename "$source") (not found at $source)")
        fi
    done

    # Show results
    local result_msg="Hidden Config Files Linking Results:\n\n"
    
    if [[ ${#linked_files[@]} -gt 0 ]]; then
        result_msg+="Successfully linked:\n"
        for file in "${linked_files[@]}"; do
            result_msg+="$file\n"
        done
    fi
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        result_msg+="\nMissing files (skipped):\n"
        for file in "${missing_files[@]}"; do
            result_msg+="$file\n"
        done
    fi

    dialog --title "Hidden Config Linking" --msgbox "$result_msg" "$HEIGHT" "$WIDTH"
}

init_packages_silent() {
    mkdir -p "$DOTFILES_DIR"

    if [[ ! -f "$PACKAGES_JSON" ]]; then
        cat >"$PACKAGES_JSON" <<EOF
{
  "packages": [
    "go",
    "clang",
    "llvm",
    "cmake",
    "python",
    "nodejs",
    "npm",
    "feh",
    "ttf-sourcecodepro-nerd",
    "ttf-ubuntu-mono-nerd",
    "ttf-jetbrains-mono-nerd",
    "thunar",
    "htop",
    "btop",
    "polybar",
    "fzf",
    "firefox",
    "openssh",
    "alacritty",
    "fish",
    "git",
    "emacs",
    "spotify",
    "discord",
    "dialog",
    "jq",
    "tmux",
    "ripgrep",
    "fd",
    "exa",
    "bat",
    "starship",
    "zsh",
    "curl",
    "wget",
    "unzip",
    "zip",
    "tree",
    "vim"
  ]
}
EOF
    fi
}

install_all_packages_silent() {
    local pkg_array=()
    mapfile -t pkg_array < <(jq -r '.packages[]' "$PACKAGES_JSON" | sort -u)

    [[ ${#pkg_array[@]} -eq 0 ]] && return

    local new_installed=()
    for pkg in "${pkg_array[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            new_installed+=("$pkg")
        fi
    done

    [[ ${#new_installed[@]} -eq 0 ]] && return

    (
        total=${#new_installed[@]}
        current=0

        echo "XXX"
        echo "Preparing package installation..."
        echo "XXX"
        echo "0"

        for pkg in "${new_installed[@]}"; do
            current=$((current + 1))
            progress=$((current * 100 / total))

            echo "XXX"
            echo "Installing $pkg ($current/$total)..."
            echo "XXX"
            echo "$progress"

            if command -v "$PACKAGE_MANAGER" &>/dev/null; then
                if [[ -n "${SUDO_PASS:-}" ]]; then
                    printf '%s\n' "$SUDO_PASS" | "$PACKAGE_MANAGER" -S --needed --noconfirm "$pkg" &>>"$TMP_OUTPUT" || true
                else
                    "$PACKAGE_MANAGER" -S --needed --noconfirm "$pkg" &>>"$TMP_OUTPUT" || true
                fi
            else
                if [[ -n "${SUDO_PASS:-}" ]]; then
                    printf '%s\n' "$SUDO_PASS" | sudo -S pacman -S --needed --noconfirm "$pkg" &>>"$TMP_OUTPUT" || true
                else
                    sudo pacman -S --needed --noconfirm "$pkg" &>>"$TMP_OUTPUT" || true
                fi
            fi
        done

        echo "100"
    ) | dialog --title "Installing Packages" --gauge "Please wait..." "$HEIGHT" "$WIDTH" 0
}

link_dotfiles_silent() {
    if [[ ! -d "$DOTFILES_DIR/dotfiles" ]]; then
        dialog --title "Warning" --msgbox "Dotfiles directory not found at $DOTFILES_DIR/dotfiles" "$HEIGHT" "$WIDTH"
        return
    fi

    mkdir -p "$CONFIG_DIR"
    for item in "$DOTFILES_DIR/dotfiles"/.* "$DOTFILES_DIR/dotfiles"/*; do
        [[ -e "$item" && ! "$(basename "$item")" =~ ^\.{1,2}$ ]] || continue
        local filename
        filename=$(basename "$item")
        local target="$CONFIG_DIR/$filename"
        force_link "$item" "$target"
    done
}

validate_package_exists() {
    local name="$1"
    if pacman -Si "$name" &>/dev/null; then
        return 0
    fi
    if command -v "$PACKAGE_MANAGER" &>/dev/null && "$PACKAGE_MANAGER" -Si "$name" &>/dev/null; then
        return 0
    fi
    dialog --title "Validation Failed" --msgbox "Package '$name' not found in any repositories." "$HEIGHT" "$WIDTH"
    return 1
}

add_package() {
    local pkg_name
    pkg_name=$(dialog --title "Add Package" --inputbox "Enter package name:" "$HEIGHT" "$WIDTH" 2>&1 >/dev/tty)
    [[ $? -ne 0 || -z "$pkg_name" ]] && return

    if ! validate_package_exists "$pkg_name"; then
        return
    fi

    local updated
    updated=$(jq --arg pkg "$pkg_name" '.packages += [$pkg] | .packages |= sort | .packages |= unique' "$PACKAGES_JSON")
    echo "$updated" > "$PACKAGES_JSON"

    dialog --title "Package Added" --msgbox "'$pkg_name' added to packages.json" "$HEIGHT" "$WIDTH"
}

install_packages() {
    local pkg_array=()
    mapfile -t pkg_array < <(jq -r '.packages[]' "$PACKAGES_JSON" | sort -u)

    [[ ${#pkg_array[@]} -eq 0 ]] && dialog --title "Install Packages" --msgbox "No packages found in packages.json." "$HEIGHT" "$WIDTH" && return

    run_with_sudo true

    local new_installed=()
    for pkg in "${pkg_array[@]}"; do
        if ! pacman -Qi "$pkg" &>/dev/null; then
            new_installed+=("$pkg")
        fi
    done

    if [[ ${#new_installed[@]} -eq 0 ]]; then
        dialog --title "Install Packages" --msgbox "All packages already installed." "$HEIGHT" "$WIDTH"
        return
    fi

    (
        total=${#new_installed[@]}
        current=0

        echo "XXX"
        echo "Preparing package installation..."
        echo "XXX"
        echo "0"

        for pkg in "${new_installed[@]}"; do
            current=$((current + 1))
            progress=$((current * 100 / total))

            echo "XXX"
            echo "Installing $pkg ($current/$total)..."
            echo "XXX"
            echo "$progress"

            if command -v "$PACKAGE_MANAGER" &>/dev/null; then
                printf '%s\n' "$SUDO_PASS" | "$PACKAGE_MANAGER" -S --needed --noconfirm "$pkg" &>>"$TMP_OUTPUT" || true
            else
                printf '%s\n' "$SUDO_PASS" | sudo -S pacman -S --needed --noconfirm "$pkg" &>>"$TMP_OUTPUT" || true
            fi
        done

        echo "100"
    ) | dialog --title "Installing Packages" --gauge "Please wait..." "$HEIGHT" "$WIDTH" 0

    dialog --title "Installation Complete" --msgbox "Package installation process finished.\n\nCheck $TMP_OUTPUT for detailed logs." "$HEIGHT" "$WIDTH"
}

remove_packages() {
    local pkg_array=()
    mapfile -t pkg_array < <(jq -r '.packages[]' "$PACKAGES_JSON" | sort -u)

    if [[ ${#pkg_array[@]} -eq 0 ]]; then
        dialog --title "Remove Packages" --msgbox "No packages found in packages.json." "$HEIGHT" "$WIDTH"
        return
    fi

    local dialog_args=()
    for pkg in "${pkg_array[@]}"; do
        dialog_args+=("$pkg" "$pkg")
    done

    local del_pkg
    del_pkg=$(dialog --title "Remove Package" \
        --cancel-label "Cancel" \
        --menu "Select package to remove" "$HEIGHT" "$WIDTH" 0 \
        "${dialog_args[@]}" \
        2>&1 >/dev/tty)
    [[ $? -ne 0 ]] && return

    run_with_sudo true

    (
        echo "XXX"
        echo "Removing package $del_pkg..."
        echo "XXX"
        echo "50"

        if command -v "$PACKAGE_MANAGER" &>/dev/null; then
            printf '%s\n' "$SUDO_PASS" | "$PACKAGE_MANAGER" -Rns --noconfirm "$del_pkg" &>>"$TMP_OUTPUT" || true
        else
            printf '%s\n' "$SUDO_PASS" | sudo -S pacman -Rns --noconfirm "$del_pkg" &>>"$TMP_OUTPUT" || true
        fi

        echo "100"
    ) | dialog --title "Removing Package" --gauge "Please wait..." "$HEIGHT" "$WIDTH" 0

    local updated
    updated=$(jq --arg pkg "$del_pkg" '.packages |= map(select(. != $pkg))' "$PACKAGES_JSON")
    echo "$updated" >"$PACKAGES_JSON"

    dialog --title "Package Removed" --msgbox "'$del_pkg' removed from system and packages.json" "$HEIGHT" "$WIDTH"
}

clean_packages() {
    run_with_sudo true

    # Clean orphaned packages
    local orphaned
    orphaned=$(pacman -Qdtq 2>/dev/null || true)
    if [[ -n "$orphaned" ]]; then
        dialog --title "Remove Orphans" --yesno "Found orphaned packages:\n\n$orphaned\n\nRemove them?" "$HEIGHT" "$WIDTH"
        if [[ $? -eq 0 ]]; then
            echo "$orphaned" | xargs -r printf '%s\n' "$SUDO_PASS" | sudo -S pacman -Rns --noconfirm
            dialog --title "Orphans Removed" --msgbox "Orphaned packages removed." "$HEIGHT" "$WIDTH"
        fi
    else
        dialog --title "No Orphans" --msgbox "No orphaned packages found." "$HEIGHT" "$WIDTH"
    fi

    # Clean package cache
    dialog --title "Clean Package Cache" --yesno "Do you want to clear the package cache?\n(This runs 'pacman -Scc')" "$HEIGHT" "$WIDTH"
    if [[ $? -eq 0 ]]; then
        printf '%s\n' "$SUDO_PASS" | sudo -S pacman -Scc --noconfirm
        dialog --title "Cache Cleaned" --msgbox "Package cache cleaned." "$HEIGHT" "$WIDTH"
    fi

    dialog --title "Clean Complete" --msgbox "All cleanup steps completed." "$HEIGHT" "$WIDTH"
}

link_dotfiles() {
    if [[ ! -d "$DOTFILES_DIR/dotfiles" ]]; then
        dialog --title "Error" --msgbox "Dotfiles directory not found at $DOTFILES_DIR/dotfiles" "$HEIGHT" "$WIDTH"
        return
    fi

    mkdir -p "$CONFIG_DIR"
    local output
    output=$(mktemp)
    for item in "$DOTFILES_DIR/dotfiles"/.* "$DOTFILES_DIR/dotfiles"/*; do
        [[ -e "$item" && ! "$(basename "$item")" =~ ^\.{1,2}$ ]] || continue
        local filename
        filename=$(basename "$item")
        local target="$CONFIG_DIR/$filename"
        force_link "$item" "$target"
        printf "├── %s -> %s\n" "$target" "$item" >>"$output"
    done
    dialog --title "Linked Dotfiles" --textbox "$output" "$HEIGHT" "$WIDTH"
    rm -f "$output"
}

show_file_locations() {
    local info_msg="Current Configuration:\n\n"
    info_msg+="Dotfiles Directory: $DOTFILES_DIR\n"
    info_msg+="Config Directory: $CONFIG_DIR\n"
    info_msg+="Nvim Directory: $NVIM_DIR\n"
    info_msg+="Packages JSON: $PACKAGES_JSON\n\n"
    
    info_msg+="Expected Hidden Config Files:\n"
    info_msg+="• $DOTFILES_DIR/.tmux.conf -> $HOME/.tmux.conf\n"
    info_msg+="• $DOTFILES_DIR/.bashrc -> $HOME/.bashrc\n"
    info_msg+="• $DOTFILES_DIR/.zshrc -> $HOME/.zshrc\n"
    info_msg+="• $DOTFILES_DIR/.gitconfig -> $HOME/.gitconfig\n\n"
    
    info_msg+="File Status:\n"
    local files=(
        "$DOTFILES_DIR/.tmux.conf"
        "$DOTFILES_DIR/.bashrc" 
        "$DOTFILES_DIR/.zshrc"
        "$DOTFILES_DIR/.gitconfig"
    )
    
    for file in "${files[@]}"; do
        if [[ -f "$file" ]]; then
            info_msg+="✓ $(basename "$file") exists\n"
        else
            info_msg+="✗ $(basename "$file") missing\n"
        fi
    done

    dialog --title "File Locations & Status" --msgbox "$info_msg" "$HEIGHT" "$WIDTH"
}

create_dotfiles_directory() {
    mkdir -p "$DOTFILES_DIR/dotfiles"
    
    # Create sample hidden config files if they don't exist
    local sample_tmux="$DOTFILES_DIR/.tmux.conf"
    local sample_bashrc="$DOTFILES_DIR/.bashrc"
    
    if [[ ! -f "$sample_tmux" ]]; then
        cat > "$sample_tmux" <<'EOF'
# Sample tmux configuration
# Prefix key
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Split panes
bind | split-window -h
bind - split-window -v

# Reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Enable mouse mode
set -g mouse on

# Status bar
set -g status-bg black
set -g status-fg white
EOF
    fi
    
    if [[ ! -f "$sample_bashrc" ]]; then
        cat > "$sample_bashrc" <<'EOF'
# Sample bashrc configuration
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Aliases
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'

# History
HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000

# Check window size after each command
shopt -s checkwinsize

# Colored prompt
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# Enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
EOF
    fi
    
    dialog --title "Directory Created" --msgbox "Created dotfiles directory at $DOTFILES_DIR/dotfiles\n\nAlso created sample files:\n• .tmux.conf\n• .bashrc\n\nYou can now customize these files and use option 7 to symlink them." "$HEIGHT" "$WIDTH"
}

dialog_box() {
    dialog --title "Linux System Manager" --msgbox "System manager by csode\n\nVersion 2.0 - Enhanced" 12 50
    while true; do
        if ! show_main_menu; then break; fi
    done
}

show_main_menu() {
    local choice
    choice=$(dialog --title "Linux System Manager" \
        --cancel-label "Exit" \
        --menu "Choose an option" "$HEIGHT" "$WIDTH" 0 \
        1 "Full Setup (Recommended)" \
        2 "Install packages" \
        3 "Add new package" \
        4 "Remove packages" \
        5 "Clean system" \
        6 "Symlink dotfiles" \
        7 "Symlink hidden config files" \
        9 "Show file locations" \
        2>&1 >/dev/tty)

    local status=$?
    if [[ $status -eq 1 ]]; then
        clear
        exit 0
    fi
    
    case "$choice" in
    1) full_setup ;;
    2) install_packages ;;
    3) add_package ;;
    4) remove_packages ;;
    5) clean_packages ;;
    6) link_dotfiles ;;
    7) link_hidden_config ;;
    8) show_file_locations ;;
    esac
}

main
